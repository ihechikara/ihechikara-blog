    <Header />


    <main class="md:flex xl:flex">
      <div class="md:flex md:justify-evenly xl:flex  xl:justify-evenly">
        <section
            class="mx-6 md:mx-6 md:w-64 xl:mx-8 xl:w-64"
          >
            <h1
              class="font-semibold leading-[33px] xl:leading-[2.75rem] text-[28.43px] xl:text-[2.5rem] font-[Work_Sans] mt-16 xl:mt-20 mb-8"
            >
              <span class="md:hidden xl:hidden">Browse by topic</span>
              <span class="hidden md:block md:text-[22px] xl:block xl:text-[21.33px]">All Tags</span>
            </h1>
    
            <div class="flex flex-wrap">
              {
                tags.sort().map((tag) => (
                  <p class="mr-2 md:mr-4 xl:mr-6 mb-10 md:mb-12 xl:mb-12 text-base leading-[14px] text-[#232055] font-[Work_Sans] font-medium">
                    <a href={`/tags/${tag}`} class="py-3 px-6 bg-[#87E0B2] ">
                      {tag}
                    </a>
                  </p>
                ))
              }
            </div>
          </section>
          <div class="hidden md:block xl:block md:h-full xl:h-full md:border-r xl:border-r md:border-[#5A5880] xl:border-[#5A5880] md:mr-4 xl:mr-12"></div>
      </div>




         <div>

          <h2 class="mx-6 mb-10 md:mb-6 mt-2 md:mt-16 xl:mt-24 font-[Work_Sans] font-normal md:font-semibold xl:font-semibold leading-[1.5625rem] text-[1.3rem] md:text-[24px] xl:text-[2rem] md:px-[1rem] xl:px-[2rem]">
            Articles
          </h2>
    
    
        <!-- articles section -->
        <section class="mx-6 md:grid md:grid-cols-2 xl:grid xl:grid-cols-2">
            <p>Posts tagged with {title}</p>

                {posts.map(post => 
                    <p>{post.frontmatter.pubDate} - <a href={post.url}>{post.frontmatter.title}</a></p>
                )}
            <p><a href ="/tags/">See all tags...</a></p>
        </section>
        <!-- pagination -->
        <section class="mx-6 mb-32 flex justify-between">
          <!-- {page.url.prev ? <a href={page.url.prev}><button class="border-2 py-4 px-6">Previous</button></a> : null}
          {page.url.next ? <a href={page.url.next}><button class="border-2 py-4 px-6">Next</button></a> : null} -->
        </section>
      </div>
    </main>




    // import BaseHead from "../../components/BaseHead.astro";
// import Header from "../../components/Header.astro";
// import Footer from "../../components/Footer.astro";
// import { SITE_TITLE, SITE_DESCRIPTION } from "../../config";


// const allPosts = await Astro.glob("../posts/*.{md,mdx}");



// const tags = [
//   ...new Set(
//     [].concat.apply(
//       [],
//       allPosts.map((post) => post.frontmatter.tags)
//     )
//   ),
// ];

// const { posts } = Astro.props;
// const { tag } = Astro.params;

// let title = tag;

// export async function getStaticPaths({ paginate }) {
//   const allPosts = await Astro.glob('../posts/*.{md,mdx}');
//   const sortedPosts = allPosts.sort(
// 		(a, b) => new Date(b.frontmatter.pubDate).valueOf() - new Date(a.frontmatter.pubDate).valueOf()
// 	);

  
//   const allTags = new Set();
//   sortedPosts.map(post => {
//     post.frontmatter.tags && post.frontmatter.tags.map(tag => allTags.add(tag))
//   })


  
//   return Array.from(allTags).map((tag) => {
//     const filteredPosts = sortedPosts.filter((post) => post.frontmatter.tags.includes(tag))

//     return {
//       params: { tag },
//       props: {
//         posts: filteredPosts
//       },
//     };
//     return paginate(filteredPosts, { pageSize: 1 });
//   });
  
// }


// const { page } = Astro.props;






//// 222
  <!-- <p>Posts tagged with {params.tag}</p> -->
        <div>
          {
            // page.data.map((post)=>(
            //   <h1>{post.title}</h1>
            // ))
          }

        </div>
        <hr />
        <p><a href ="/tags/">See all tags...</a></p>



export async function getStaticPaths({ paginate }) {
  const allPosts = await Astro.glob("../posts/*.{md,mdx}");
  
  const allTags = [
  ...new Set(
    [].concat.apply(
      [],
      allPosts?.map((post) => post.frontmatter.tags)
    )
  ),
  ];
  
  
  return allTags?.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tag === tag);
    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 1,
    });
  });
}

// const {posts} = Astro.props;
const { page } = Astro.props;
const params = Astro.params;